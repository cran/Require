% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgSnapshot.R
\name{dealWithMissingLibPaths}
\alias{dealWithMissingLibPaths}
\title{Only checks for deprecated libPath argument (singular)}
\usage{
dealWithMissingLibPaths(
  libPaths,
  standAlone = getOption("Require.standAlone", FALSE),
  ...
)
}
\arguments{
\item{libPaths}{The library path (or libraries) where all packages should be
installed, and looked for to load (i.e., call \code{library}). This can be used
to create isolated, stand alone package installations, if used with
\code{standAlone = TRUE}. Currently, the path supplied here will be prepended to
\code{.libPaths()} (temporarily during this call) to \code{Require} if
\code{standAlone = FALSE} or will set (temporarily) \code{.libPaths()} to
\verb{c(libPaths, tail(libPaths(), 1)} to keep base packages.}

\item{standAlone}{Logical. If \code{TRUE}, all packages will be installed to and
loaded from the \code{libPaths} only. NOTE: If \code{TRUE}, THIS WILL CHANGE THE
USER'S \code{.libPaths()}, similar to e.g., the \code{checkpoint} package. If
\code{FALSE}, then \code{libPath} will be prepended to \code{.libPaths()} during the
\code{Require} call, resulting in shared packages, i.e., it will include the
user's default package folder(s). This can be create dramatically faster
installs if the user has a substantial number of the packages already in
their personal library. Default \code{FALSE} to minimize package installing.}

\item{...}{Checks for the incorrect argument \code{libPath} (no s)}
}
\description{
Only checks for deprecated libPath argument (singular)
}
